{"version":3,"file":"stimpack.js","sources":["../src/stimpack.ts"],"sourcesContent":["require('reflect-metadata');\r\n\r\nexport interface Annotable extends Function {\r\n    annotations?: Annotable[];\r\n    propAnnotations?: Map<string|symbol, Annotable>;\r\n}\r\n\r\nexport class Injector {\r\n\r\n    private types = new Map();\r\n\r\n    constructor() {\r\n        this.types.set(Injector, this);\r\n    }\r\n\r\n    get(Type: Annotable): any {\r\n        var instance = this.types.get(Type);\r\n        if (!instance) {\r\n            const params = [];\r\n            instance = Object.create(Type.prototype);\r\n            if (Type.annotations) {\r\n                for (let TargetType of Type.annotations) {\r\n                    params.push(this.get(TargetType));\r\n                }\r\n                Type.apply(instance, params);\r\n            }\r\n            if (Type.propAnnotations) {\r\n                for (const [propName, TargetType] of Type.propAnnotations) {\r\n                    instance[propName] = this.get(TargetType);\r\n                }\r\n            }\r\n            Type.apply(instance, params);\r\n            this.types.set(Type, instance);\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n\r\nclass InjectBase {\r\n    Type: Annotable;\r\n}\r\n\r\nexport function Inject(target: Annotable|Object, propertyKey?: string|symbol) {\r\n    if (typeof target === 'object') {\r\n        const Type = Reflect.getMetadata('design:type', target, propertyKey);\r\n        const Ctor: Annotable = target.constructor;\r\n        const propAnnotations = Ctor.propAnnotations || (Ctor.propAnnotations = new Map<string, Annotable>());\r\n        propAnnotations.set(propertyKey, Type);\r\n    } else {\r\n        (<Annotable>target).annotations = Reflect.getMetadata('design:paramtypes', target);\r\n    }\r\n}"],"names":["Inject","Injector.get","Injector","Injector.constructor"],"mappings":";;;;;;;;QA0CA,MAAA,GAAA,MAAA;;;;;;AA1CA,OAAO,CAAC,kBAAkB,CAAC,CAAC;;IAO5B,QAAA;AAIAE,aAJA,QAAA,GAIAA;8BAJA,QAAA;;AAEYC,YAAZA,CAAAA,KAAiBA,GAAGA,IAAIA,GAAGA,EAAEA,CAACA;AAGtBA,YAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,CAACA;KAClCA;;iBANL,QAAA;;eAQOD,aAACA,IAAeA,EAAvBA;AACQD,gBAAIA,QAAQA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,IAAIA,CAACA,CAACA;AACpCA,gBAAIA,CAACA,QAAQA,EAAEA;AACXA,oBAAMA,MAAMA,GAAGA,EAAEA,CAACA;AAClBA,wBAAQA,GAAGA,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;AACzCA,oBAAIA,IAAIA,CAACA,WAAWA,EAAEA;;;;;;AAClBA,6CAAuBA,IAAIA,CAACA,WAAWA,8HAAEA;gCAAhCA,UAAUA;;AACfA,kCAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,UAAUA,CAACA,CAACA,CAACA;yBACrCA;;;;;;;;;;;;;;;;AACDA,wBAAIA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,MAAMA,CAACA,CAACA;iBAChCA;AACDA,oBAAIA,IAAIA,CAACA,eAAeA,EAAEA;;;;;;AACtBA,8CAAqCA,IAAIA,CAACA,eAAeA,mIAAEA;;;gCAA/CA,QAAQA;gCAAEA,UAAUA;;AAC5BA,oCAAQA,CAACA,QAAQA,CAACA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,UAAUA,CAACA,CAACA;yBAC7CA;;;;;;;;;;;;;;;iBACJA;AACDA,oBAAIA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,MAAMA,CAACA,CAACA;AAC7BA,oBAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;aAClCA;AACDA,mBAAOA,QAAQA,CAACA;SACnBA;;;WA5BL,QAAA;;;QAAA,QAAA,GAAA,QAAA;;IA+BA,UAAA,YAAA,UAAA;0BAAA,UAAA;;;AAIA,SAAA,MAAA,CAAuB,MAAwB,EAAE,WAA2B,EAA5E;AACID,QAAIA,OAAOA,MAAMA,KAAKA,QAAQA,EAAEA;AAC5BA,YAAMA,IAAIA,GAAGA,OAAOA,CAACA,WAAWA,CAACA,aAAaA,EAAEA,MAAMA,EAAEA,WAAWA,CAACA,CAACA;AACrEA,YAAMA,IAAIA,GAAcA,MAAMA,CAACA,WAAWA,CAACA;AAC3CA,YAAMA,eAAeA,GAAGA,IAAIA,CAACA,eAAeA,KAAKA,IAAIA,CAACA,eAAeA,GAAGA,IAAIA,GAAGA,EAAqBA,CAAAA,AAACA,CAACA;AACtGA,uBAAeA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,IAAIA,CAACA,CAACA;KAC1CA,MAAMA;AACSA,cAAOA,CAACA,WAAWA,GAAGA,OAAOA,CAACA,WAAWA,CAACA,mBAAmBA,EAAEA,MAAMA,CAACA,CAACA;KACtFA;CACJA;;AAAAA"}